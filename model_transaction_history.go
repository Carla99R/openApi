/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionHistory A list of all Transactions in the transfer including reversals.
type TransactionHistory struct {
	// The type of resource being returned: list.
	ResourceType *string `json:"resource_type,omitempty"`
	// The number of Transactions in the list: 1.
	ItemCount *int64 `json:"item_count,omitempty"`
	Data *Data       `json:"data,omitempty"`
}

// NewTransactionHistory instantiates a new TransactionHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionHistory() *TransactionHistory {
	this := TransactionHistory{}
	return &this
}

// NewTransactionHistoryWithDefaults instantiates a new TransactionHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionHistoryWithDefaults() *TransactionHistory {
	this := TransactionHistory{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *TransactionHistory) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionHistory) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *TransactionHistory) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *TransactionHistory) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *TransactionHistory) GetItemCount() int64 {
	if o == nil || o.ItemCount == nil {
		var ret int64
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionHistory) GetItemCountOk() (*int64, bool) {
	if o == nil || o.ItemCount == nil {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *TransactionHistory) HasItemCount() bool {
	if o != nil && o.ItemCount != nil {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int64 and assigns it to the ItemCount field.
func (o *TransactionHistory) SetItemCount(v int64) {
	o.ItemCount = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *TransactionHistory) GetData() Data {
	if o == nil || o.Data == nil {
		var ret Data
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionHistory) GetDataOk() (*Data, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *TransactionHistory) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given Data and assigns it to the Data field.
func (o *TransactionHistory) SetData(v Data) {
	o.Data = &v
}

func (o TransactionHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	if o.ItemCount != nil {
		toSerialize["item_count"] = o.ItemCount
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionHistory struct {
	value *TransactionHistory
	isSet bool
}

func (v NullableTransactionHistory) Get() *TransactionHistory {
	return v.value
}

func (v *NullableTransactionHistory) Set(val *TransactionHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionHistory(val *TransactionHistory) *NullableTransactionHistory {
	return &NullableTransactionHistory{value: val, isSet: true}
}

func (v NullableTransactionHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


