/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RequestSenderAddress Address of the sender. Required. If you provide this object, you must provide `line1`, `city`, `postal_code` and `country`.
type RequestSenderAddress struct {
	// Required. First line of the sender's address. Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./&#92;:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], length: 1-50. If you cannot provide the actual value, you must provide the alternative value '#NOTINCLUDED'.
	Line1 string `json:"line1"`
	// Second line of the sender's address. Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./&#92;:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], length: 1-50.
	Line2 *string `json:"line2,omitempty"`
	// Required. The sender's city. Alphanumeric Special [a-zA-Z0-9 !\"#$%&'()*+,-./&#92;:;<=>?@[]_`{|}~ÀÁÂÃÄÅÇÈÉÊËÌÍÎÏÑÒÓÔÕÖÙÚÛÜÝàáâãäåçèéêëìíîïñòóôõöùúûüýÿ], length: 1-25. If you cannot provide the actual value, you must provide the alternative value '#NOTINCLUDED'.
	City string `json:"city"`
	// The sender's province, state or territory. Conditional, required if sender's `country` is USA or CAN. Must be an ISO 3166-2 uppercase alpha 2 or 3 character country subdivision code. For example, Missouri is MO.
	CountrySubdivision *string `json:"country_subdivision,omitempty"`
	// Required. The sender's postal code. For USA, this must be a valid value of 5 digits or 5 digits hyphen 4 digits, for example '63368', '63368-5555'. For other regions, this can be alphanumeric, length 1-10.
	PostalCode string `json:"postal_code"`
	// Required. The sender's country as an ISO 3166-1 uppercase alpha-3 country code; see [Country and Currency Codes](https://developer.mastercard.com/mastercard-send-person-to-person/documentation/field-uris-codes/country-currency-codes/). For example, the United States of America is USA.
	Country string `json:"country"`
}

// NewRequestSenderAddress instantiates a new RequestSenderAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequestSenderAddress(line1 string, city string, postalCode string, country string) *RequestSenderAddress {
	this := RequestSenderAddress{}
	this.Line1 = line1
	this.City = city
	this.PostalCode = postalCode
	this.Country = country
	return &this
}

// NewRequestSenderAddressWithDefaults instantiates a new RequestSenderAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequestSenderAddressWithDefaults() *RequestSenderAddress {
	this := RequestSenderAddress{}
	return &this
}

// GetLine1 returns the Line1 field value
func (o *RequestSenderAddress) GetLine1() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Line1
}

// GetLine1Ok returns a tuple with the Line1 field value
// and a boolean to check if the value has been set.
func (o *RequestSenderAddress) GetLine1Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Line1, true
}

// SetLine1 sets field value
func (o *RequestSenderAddress) SetLine1(v string) {
	o.Line1 = v
}

// GetLine2 returns the Line2 field value if set, zero value otherwise.
func (o *RequestSenderAddress) GetLine2() string {
	if o == nil || o.Line2 == nil {
		var ret string
		return ret
	}
	return *o.Line2
}

// GetLine2Ok returns a tuple with the Line2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSenderAddress) GetLine2Ok() (*string, bool) {
	if o == nil || o.Line2 == nil {
		return nil, false
	}
	return o.Line2, true
}

// HasLine2 returns a boolean if a field has been set.
func (o *RequestSenderAddress) HasLine2() bool {
	if o != nil && o.Line2 != nil {
		return true
	}

	return false
}

// SetLine2 gets a reference to the given string and assigns it to the Line2 field.
func (o *RequestSenderAddress) SetLine2(v string) {
	o.Line2 = &v
}

// GetCity returns the City field value
func (o *RequestSenderAddress) GetCity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.City
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
func (o *RequestSenderAddress) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.City, true
}

// SetCity sets field value
func (o *RequestSenderAddress) SetCity(v string) {
	o.City = v
}

// GetCountrySubdivision returns the CountrySubdivision field value if set, zero value otherwise.
func (o *RequestSenderAddress) GetCountrySubdivision() string {
	if o == nil || o.CountrySubdivision == nil {
		var ret string
		return ret
	}
	return *o.CountrySubdivision
}

// GetCountrySubdivisionOk returns a tuple with the CountrySubdivision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RequestSenderAddress) GetCountrySubdivisionOk() (*string, bool) {
	if o == nil || o.CountrySubdivision == nil {
		return nil, false
	}
	return o.CountrySubdivision, true
}

// HasCountrySubdivision returns a boolean if a field has been set.
func (o *RequestSenderAddress) HasCountrySubdivision() bool {
	if o != nil && o.CountrySubdivision != nil {
		return true
	}

	return false
}

// SetCountrySubdivision gets a reference to the given string and assigns it to the CountrySubdivision field.
func (o *RequestSenderAddress) SetCountrySubdivision(v string) {
	o.CountrySubdivision = &v
}

// GetPostalCode returns the PostalCode field value
func (o *RequestSenderAddress) GetPostalCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PostalCode
}

// GetPostalCodeOk returns a tuple with the PostalCode field value
// and a boolean to check if the value has been set.
func (o *RequestSenderAddress) GetPostalCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PostalCode, true
}

// SetPostalCode sets field value
func (o *RequestSenderAddress) SetPostalCode(v string) {
	o.PostalCode = v
}

// GetCountry returns the Country field value
func (o *RequestSenderAddress) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *RequestSenderAddress) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *RequestSenderAddress) SetCountry(v string) {
	o.Country = v
}

func (o RequestSenderAddress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["line1"] = o.Line1
	}
	if o.Line2 != nil {
		toSerialize["line2"] = o.Line2
	}
	if true {
		toSerialize["city"] = o.City
	}
	if o.CountrySubdivision != nil {
		toSerialize["country_subdivision"] = o.CountrySubdivision
	}
	if true {
		toSerialize["postal_code"] = o.PostalCode
	}
	if true {
		toSerialize["country"] = o.Country
	}
	return json.Marshal(toSerialize)
}

type NullableRequestSenderAddress struct {
	value *RequestSenderAddress
	isSet bool
}

func (v NullableRequestSenderAddress) Get() *RequestSenderAddress {
	return v.value
}

func (v *NullableRequestSenderAddress) Set(val *RequestSenderAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestSenderAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestSenderAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestSenderAddress(val *RequestSenderAddress) *NullableRequestSenderAddress {
	return &NullableRequestSenderAddress{value: val, isSet: true}
}

func (v NullableRequestSenderAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestSenderAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


