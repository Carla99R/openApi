/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TransactionAmount transaction amount consist of value and currency
type TransactionAmount struct {
	// The transaction amount. Numeric integer, 1-999999999999. The decimal point is implied based on the relevant `currency` exponent. For example, a US Dollar $53 amount is a value of 5300.
	Value *string `json:"value,omitempty"`
	// The currency of the transaction amount as an ISO 4217 uppercase alpha-3 currency code; see [Country and Currency Codes](https://developer.mastercard.com/mastercard-send-person-to-person/documentation/field-uris-codes/country-currency-codes/). For example, US Dollars is USD.
	Currency *string `json:"currency,omitempty"`
}

// NewTransactionAmount instantiates a new TransactionAmount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransactionAmount() *TransactionAmount {
	this := TransactionAmount{}
	return &this
}

// NewTransactionAmountWithDefaults instantiates a new TransactionAmount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransactionAmountWithDefaults() *TransactionAmount {
	this := TransactionAmount{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *TransactionAmount) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAmount) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *TransactionAmount) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *TransactionAmount) SetValue(v string) {
	o.Value = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *TransactionAmount) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TransactionAmount) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *TransactionAmount) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *TransactionAmount) SetCurrency(v string) {
	o.Currency = &v
}

func (o TransactionAmount) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.Currency != nil {
		toSerialize["currency"] = o.Currency
	}
	return json.Marshal(toSerialize)
}

type NullableTransactionAmount struct {
	value *TransactionAmount
	isSet bool
}

func (v NullableTransactionAmount) Get() *TransactionAmount {
	return v.value
}

func (v *NullableTransactionAmount) Set(val *TransactionAmount) {
	v.value = val
	v.isSet = true
}

func (v NullableTransactionAmount) IsSet() bool {
	return v.isSet
}

func (v *NullableTransactionAmount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransactionAmount(val *TransactionAmount) *NullableTransactionAmount {
	return &NullableTransactionAmount{value: val, isSet: true}
}

func (v NullableTransactionAmount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransactionAmount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


