/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Transfers Response details
type Transfers struct {
	// The type of resource being returned: list.
	ResourceType *string `json:"resource_type,omitempty"`
	// Number of Transactions in the list
	ItemCount *int64 `json:"item_count,omitempty"`
	Data *P2pData    `json:"data,omitempty"`
}

// NewTransfers instantiates a new Transfers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransfers() *Transfers {
	this := Transfers{}
	return &this
}

// NewTransfersWithDefaults instantiates a new Transfers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransfersWithDefaults() *Transfers {
	this := Transfers{}
	return &this
}

// GetResourceType returns the ResourceType field value if set, zero value otherwise.
func (o *Transfers) GetResourceType() string {
	if o == nil || o.ResourceType == nil {
		var ret string
		return ret
	}
	return *o.ResourceType
}

// GetResourceTypeOk returns a tuple with the ResourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfers) GetResourceTypeOk() (*string, bool) {
	if o == nil || o.ResourceType == nil {
		return nil, false
	}
	return o.ResourceType, true
}

// HasResourceType returns a boolean if a field has been set.
func (o *Transfers) HasResourceType() bool {
	if o != nil && o.ResourceType != nil {
		return true
	}

	return false
}

// SetResourceType gets a reference to the given string and assigns it to the ResourceType field.
func (o *Transfers) SetResourceType(v string) {
	o.ResourceType = &v
}

// GetItemCount returns the ItemCount field value if set, zero value otherwise.
func (o *Transfers) GetItemCount() int64 {
	if o == nil || o.ItemCount == nil {
		var ret int64
		return ret
	}
	return *o.ItemCount
}

// GetItemCountOk returns a tuple with the ItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfers) GetItemCountOk() (*int64, bool) {
	if o == nil || o.ItemCount == nil {
		return nil, false
	}
	return o.ItemCount, true
}

// HasItemCount returns a boolean if a field has been set.
func (o *Transfers) HasItemCount() bool {
	if o != nil && o.ItemCount != nil {
		return true
	}

	return false
}

// SetItemCount gets a reference to the given int64 and assigns it to the ItemCount field.
func (o *Transfers) SetItemCount(v int64) {
	o.ItemCount = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Transfers) GetData() P2pData {
	if o == nil || o.Data == nil {
		var ret P2pData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transfers) GetDataOk() (*P2pData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Transfers) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given P2pData and assigns it to the Data field.
func (o *Transfers) SetData(v P2pData) {
	o.Data = &v
}

func (o Transfers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ResourceType != nil {
		toSerialize["resource_type"] = o.ResourceType
	}
	if o.ItemCount != nil {
		toSerialize["item_count"] = o.ItemCount
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableTransfers struct {
	value *Transfers
	isSet bool
}

func (v NullableTransfers) Get() *Transfers {
	return v.value
}

func (v *NullableTransfers) Set(val *Transfers) {
	v.value = val
	v.isSet = true
}

func (v NullableTransfers) IsSet() bool {
	return v.isSet
}

func (v *NullableTransfers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransfers(val *Transfers) *NullableTransfers {
	return &NullableTransfers{value: val, isSet: true}
}

func (v NullableTransfers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransfers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


