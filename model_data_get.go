/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DataGet An array containing the Transactions in the transfer.
type DataGet struct {
	// transaction array
	Transaction []TransactionGet `json:"transaction,omitempty"`
}

// NewDataGet instantiates a new DataGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataGet() *DataGet {
	this := DataGet{}
	return &this
}

// NewDataGetWithDefaults instantiates a new DataGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataGetWithDefaults() *DataGet {
	this := DataGet{}
	return &this
}

// GetTransaction returns the Transaction field value if set, zero value otherwise.
func (o *DataGet) GetTransaction() []TransactionGet {
	if o == nil || o.Transaction == nil {
		var ret []TransactionGet
		return ret
	}
	return o.Transaction
}

// GetTransactionOk returns a tuple with the Transaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataGet) GetTransactionOk() ([]TransactionGet, bool) {
	if o == nil || o.Transaction == nil {
		return nil, false
	}
	return o.Transaction, true
}

// HasTransaction returns a boolean if a field has been set.
func (o *DataGet) HasTransaction() bool {
	if o != nil && o.Transaction != nil {
		return true
	}

	return false
}

// SetTransaction gets a reference to the given []TransactionGet and assigns it to the Transaction field.
func (o *DataGet) SetTransaction(v []TransactionGet) {
	o.Transaction = v
}

func (o DataGet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transaction != nil {
		toSerialize["transaction"] = o.Transaction
	}
	return json.Marshal(toSerialize)
}

type NullableDataGet struct {
	value *DataGet
	isSet bool
}

func (v NullableDataGet) Get() *DataGet {
	return v.value
}

func (v *NullableDataGet) Set(val *DataGet) {
	v.value = val
	v.isSet = true
}

func (v NullableDataGet) IsSet() bool {
	return v.isSet
}

func (v *NullableDataGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataGet(val *DataGet) *NullableDataGet {
	return &NullableDataGet{value: val, isSet: true}
}

func (v NullableDataGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


