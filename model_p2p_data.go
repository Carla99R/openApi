/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// P2pData An array containing the transfer response in the transfer
type P2pData struct {
	// Transfer array
	Transfer []TransferGet `json:"transfer,omitempty"`
}

// NewP2pData instantiates a new P2pData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewP2pData() *P2pData {
	this := P2pData{}
	return &this
}

// NewP2pDataWithDefaults instantiates a new P2pData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewP2pDataWithDefaults() *P2pData {
	this := P2pData{}
	return &this
}

// GetTransfer returns the Transfer field value if set, zero value otherwise.
func (o *P2pData) GetTransfer() []TransferGet {
	if o == nil || o.Transfer == nil {
		var ret []TransferGet
		return ret
	}
	return o.Transfer
}

// GetTransferOk returns a tuple with the Transfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P2pData) GetTransferOk() ([]TransferGet, bool) {
	if o == nil || o.Transfer == nil {
		return nil, false
	}
	return o.Transfer, true
}

// HasTransfer returns a boolean if a field has been set.
func (o *P2pData) HasTransfer() bool {
	if o != nil && o.Transfer != nil {
		return true
	}

	return false
}

// SetTransfer gets a reference to the given []TransferGet and assigns it to the Transfer field.
func (o *P2pData) SetTransfer(v []TransferGet) {
	o.Transfer = v
}

func (o P2pData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Transfer != nil {
		toSerialize["transfer"] = o.Transfer
	}
	return json.Marshal(toSerialize)
}

type NullableP2pData struct {
	value *P2pData
	isSet bool
}

func (v NullableP2pData) Get() *P2pData {
	return v.value
}

func (v *NullableP2pData) Set(val *P2pData) {
	v.value = val
	v.isSet = true
}

func (v NullableP2pData) IsSet() bool {
	return v.isSet
}

func (v *NullableP2pData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableP2pData(val *P2pData) *NullableP2pData {
	return &NullableP2pData{value: val, isSet: true}
}

func (v NullableP2pData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableP2pData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


