/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// P2pCustomField Contains custom field names and values to appear in the reconciliation report. This can be a list of multiple name/value pairs in response. The names provided must match the configured in the partner setup.
type P2pCustomField struct {
	// Name to be displayed in the reconciliation report. This value will appear as a header in the reconciliation reports. Name values to be defined during the onboarding process. Details- 1-40
	Name *string `json:"name,omitempty"`
	// Value to be displayed in the reconciliation report. Details- 1-200
	Value *string `json:"value,omitempty"`
}

// NewP2pCustomField instantiates a new P2pCustomField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewP2pCustomField() *P2pCustomField {
	this := P2pCustomField{}
	return &this
}

// NewP2pCustomFieldWithDefaults instantiates a new P2pCustomField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewP2pCustomFieldWithDefaults() *P2pCustomField {
	this := P2pCustomField{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *P2pCustomField) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P2pCustomField) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *P2pCustomField) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *P2pCustomField) SetName(v string) {
	o.Name = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *P2pCustomField) GetValue() string {
	if o == nil || o.Value == nil {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *P2pCustomField) GetValueOk() (*string, bool) {
	if o == nil || o.Value == nil {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *P2pCustomField) HasValue() bool {
	if o != nil && o.Value != nil {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *P2pCustomField) SetValue(v string) {
	o.Value = &v
}

func (o P2pCustomField) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableP2pCustomField struct {
	value *P2pCustomField
	isSet bool
}

func (v NullableP2pCustomField) Get() *P2pCustomField {
	return v.value
}

func (v *NullableP2pCustomField) Set(val *P2pCustomField) {
	v.value = val
	v.isSet = true
}

func (v NullableP2pCustomField) IsSet() bool {
	return v.isSet
}

func (v *NullableP2pCustomField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableP2pCustomField(val *P2pCustomField) *NullableP2pCustomField {
	return &NullableP2pCustomField{value: val, isSet: true}
}

func (v NullableP2pCustomField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableP2pCustomField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


