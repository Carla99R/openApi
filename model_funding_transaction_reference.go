/*
Send Payment Transfer API

Mastercard Send Payment Transfer API

API version: 1.0.1
Contact: apisupport@mastercard.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// FundingTransactionReference For future use. This section describes information is used by the Mastercard and Visa networks to link a funding and payment transaction when both card accounts are Visa accounts or both accounts are Mastercard accounts.
type FundingTransactionReference struct {
	// For future use. Network on which funding transaction is processed. Valid values will be provided during partner onboarding.
	Network string `json:"network"`
	// For future use. Provide the ID from the funding transfer resource. Details- 6-40
	ReferenceNumber string `json:"reference_number"`
}

// NewFundingTransactionReference instantiates a new FundingTransactionReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFundingTransactionReference(network string, referenceNumber string) *FundingTransactionReference {
	this := FundingTransactionReference{}
	this.Network = network
	this.ReferenceNumber = referenceNumber
	return &this
}

// NewFundingTransactionReferenceWithDefaults instantiates a new FundingTransactionReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFundingTransactionReferenceWithDefaults() *FundingTransactionReference {
	this := FundingTransactionReference{}
	return &this
}

// GetNetwork returns the Network field value
func (o *FundingTransactionReference) GetNetwork() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Network
}

// GetNetworkOk returns a tuple with the Network field value
// and a boolean to check if the value has been set.
func (o *FundingTransactionReference) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Network, true
}

// SetNetwork sets field value
func (o *FundingTransactionReference) SetNetwork(v string) {
	o.Network = v
}

// GetReferenceNumber returns the ReferenceNumber field value
func (o *FundingTransactionReference) GetReferenceNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ReferenceNumber
}

// GetReferenceNumberOk returns a tuple with the ReferenceNumber field value
// and a boolean to check if the value has been set.
func (o *FundingTransactionReference) GetReferenceNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReferenceNumber, true
}

// SetReferenceNumber sets field value
func (o *FundingTransactionReference) SetReferenceNumber(v string) {
	o.ReferenceNumber = v
}

func (o FundingTransactionReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["network"] = o.Network
	}
	if true {
		toSerialize["reference_number"] = o.ReferenceNumber
	}
	return json.Marshal(toSerialize)
}

type NullableFundingTransactionReference struct {
	value *FundingTransactionReference
	isSet bool
}

func (v NullableFundingTransactionReference) Get() *FundingTransactionReference {
	return v.value
}

func (v *NullableFundingTransactionReference) Set(val *FundingTransactionReference) {
	v.value = val
	v.isSet = true
}

func (v NullableFundingTransactionReference) IsSet() bool {
	return v.isSet
}

func (v *NullableFundingTransactionReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFundingTransactionReference(val *FundingTransactionReference) *NullableFundingTransactionReference {
	return &NullableFundingTransactionReference{value: val, isSet: true}
}

func (v NullableFundingTransactionReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFundingTransactionReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


